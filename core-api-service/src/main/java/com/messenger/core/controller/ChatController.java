package com.messenger.core.controller;

import com.messenger.core.dto.ChatDto;
import com.messenger.core.service.ChatService;
import com.messenger.core.service.OptimizedDataService;
import com.messenger.core.config.JwtAuthenticationFilter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import jakarta.servlet.http.HttpServletRequest;
import java.util.List;

@Slf4j
@RestController
@RequestMapping("/api/chats")
@RequiredArgsConstructor
public class ChatController {

    private final ChatService chatService;
    private final OptimizedDataService optimizedDataService;
    private final JwtAuthenticationFilter jwtAuthenticationFilter;

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    @GetMapping
    public ResponseEntity<List<ChatDto>> getUserChats(HttpServletRequest request) {
        Long userId = getCurrentUserId(request);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
        List<ChatDto> chats = optimizedDataService.getOptimizedUserChats(userId);
        return ResponseEntity.ok(chats);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    @PostMapping("/private")
    public ResponseEntity<ChatDto> createPrivateChat(
            @RequestBody ChatDto.CreatePrivateChatRequest request,
            HttpServletRequest httpRequest) {
        Long currentUserId = getCurrentUserId(httpRequest);
        ChatDto chat = chatService.createPrivateChat(currentUserId, request.getParticipantId());
        return ResponseEntity.ok(chat);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
     */
    @PostMapping("/group")
    public ResponseEntity<ChatDto> createGroupChat(
            @RequestBody ChatDto.CreateChatRequest request,
            HttpServletRequest httpRequest) {
        Long currentUserId = getCurrentUserId(httpRequest);
        ChatDto chat = chatService.createGroupChat(currentUserId, request);
        return ResponseEntity.ok(chat);
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
     */
    @PostMapping("/{chatId}/participants")
    public ResponseEntity<ChatDto> addParticipants(
            @PathVariable Long chatId,
            @RequestBody List<Long> userIds,
            HttpServletRequest request) {
        Long currentUserId = getCurrentUserId(request);
        ChatDto chat = chatService.addParticipants(chatId, currentUserId, userIds);
        return ResponseEntity.ok(chat);
    }

    /**
     * –ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç
     */
    @DeleteMapping("/{chatId}/leave")
    public ResponseEntity<Void> leaveChat(
            @PathVariable Long chatId,
            HttpServletRequest request) {
        Long currentUserId = getCurrentUserId(request);
        chatService.leaveChat(chatId, currentUserId);
        return ResponseEntity.ok().build();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
     */
    @GetMapping("/{chatId}")
    public ResponseEntity<ChatDto> getChatInfo(
            @PathVariable Long chatId,
            HttpServletRequest request) {
        Long currentUserId = getCurrentUserId(request);
        ChatDto chat = chatService.getChatInfo(chatId, currentUserId);
        return ResponseEntity.ok(chat);
    }

    /**
     * –ü–æ–∏—Å–∫ —á–∞—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     */
    @GetMapping("/search")
    public ResponseEntity<List<ChatDto>> searchChats(
            @RequestParam String query,
            HttpServletRequest request) {
        Long currentUserId = getCurrentUserId(request);
        List<ChatDto> chats = chatService.searchChats(query, currentUserId);
        return ResponseEntity.ok(chats);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–¥–ª—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞)
     */
    @GetMapping("/{chatId}/participants")
    public ResponseEntity<List<Long>> getChatParticipants(
            @PathVariable Long chatId,
            HttpServletRequest request) {

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        String internalService = request.getHeader("X-Internal-Service");
        String serviceAuth = request.getHeader("X-Service-Auth");

        if ("websocket-server".equals(internalService) && "internal-service-key".equals(serviceAuth)) {
            // –ó–∞–ø—Ä–æ—Å –æ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ - –Ω–µ —Ç—Ä–µ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            log.info("üìû [INTERNAL] Processing internal request from {} for chat {}", internalService, chatId);
            List<Long> participantIds = chatService.getChatParticipantIdsInternal(chatId);
            return ResponseEntity.ok(participantIds);
        } else {
            // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å - —Ç—Ä–µ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            Long currentUserId = getCurrentUserId(request);
            List<Long> participantIds = chatService.getChatParticipantIds(chatId, currentUserId);
            return ResponseEntity.ok(participantIds);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ Gateway
     */
    private Long getCurrentUserId(HttpServletRequest request) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ Gateway
        String userIdHeader = request.getHeader("X-User-Id");
        if (userIdHeader != null && !userIdHeader.isEmpty()) {
            try {
                return Long.parseLong(userIdHeader);
            } catch (NumberFormatException e) {
                throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: " + userIdHeader);
            }
        }

        // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ JWT —Ñ–∏–ª—å—Ç—Ä
        Long userId = null;
        try {
            userId = jwtAuthenticationFilter.getUserIdFromRequest(request);
        } catch (Exception e) {
            throw new IllegalArgumentException("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + e.getMessage(), e);
        }

        if (userId == null) {
            throw new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
        }

        return userId;
    }
}
