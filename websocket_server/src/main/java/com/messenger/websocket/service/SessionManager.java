package websocket.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import websocket.model.MessageType;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

@Slf4j
@Service
public class SessionManager {

    private final Map<String, UserSession> sessions = new ConcurrentHashMap<>();
    private final Map<Long, String> userIdToSessionId = new ConcurrentHashMap<>();

    @Autowired
    private ChatParticipantService chatParticipantService;

    public void addSession(String sessionId, ChannelHandlerContext ctx, String username, Long userId) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        String existingSessionId = userIdToSessionId.get(userId);
        if (existingSessionId != null) {
            log.info("üîÑ [SESSION] Removing existing session for user {} (ID: {}): {}", username, userId, existingSessionId);
            removeSession(existingSessionId);
        }

        UserSession session = new UserSession(sessionId, ctx, username, userId);
        sessions.put(sessionId, session);
        userIdToSessionId.put(userId, sessionId);

        log.info("‚úÖ [SESSION] User session added: {} (userId: {}, sessionId: {})", username, userId, sessionId);
        log.info("üìä [SESSION] Total active sessions: {}", sessions.size());
    }

    public void removeSession(String sessionId) {
        UserSession session = sessions.remove(sessionId);
        if (session != null) {
            userIdToSessionId.remove(session.getUserId());
            log.info("‚ùå [SESSION] User session removed: {} (userId: {}, sessionId: {})",
                    session.getUsername(), session.getUserId(), sessionId);
            log.info("üìä [SESSION] Total active sessions: {}", sessions.size());
        } else {
            log.warn("‚ö†Ô∏è [SESSION] Attempted to remove non-existent session: {}", sessionId);
        }
    }

    public boolean isAuthenticated(String sessionId) {
        return sessions.containsKey(sessionId);
    }

    public String getUsername(String sessionId) {
        UserSession session = sessions.get(sessionId);
        return session != null ? session.getUsername() : null;
    }

    public Long getUserId(String sessionId) {
        UserSession session = sessions.get(sessionId);
        return session != null ? session.getUserId() : null;
    }

    public ChannelHandlerContext getContext(String sessionId) {
        UserSession session = sessions.get(sessionId);
        return session != null ? session.getContext() : null;
    }

    public ChannelHandlerContext getContextByUserId(Long userId) {
        String sessionId = userIdToSessionId.get(userId);
        return sessionId != null ? getContext(sessionId) : null;
    }

    public boolean isUserOnline(Long userId) {
        return userIdToSessionId.containsKey(userId);
    }

    public int getActiveSessionsCount() {
        return sessions.size();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å fallback
     */
    public List<io.netty.channel.Channel> getChatChannels(Long chatId) {
        log.info("üîç [SESSION] Getting channels for chat {} - fetching real participants from database", chatId);

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            List<Long> participantIds = chatParticipantService.getChatParticipants(chatId);
            log.info("üë• [SESSION] Found {} participants for chat {}: {}", participantIds.size(), chatId, participantIds);

            // –ï—Å–ª–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–æ—à–∏–±–∫–∞ API –∏–ª–∏ –ø—É—Å—Ç–æ–π —á–∞—Ç), –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if (participantIds.isEmpty()) {
                log.warn("‚ö†Ô∏è [SESSION] No participants found for chat {}, using fallback (all connected users)", chatId);
                return getAllActiveChannels();
            }

            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
            List<io.netty.channel.Channel> channels = participantIds.stream()
                .map(userId -> {
                    String sessionId = userIdToSessionId.get(userId);
                    if (sessionId != null) {
                        UserSession session = sessions.get(sessionId);
                        if (session != null) {
                            io.netty.channel.Channel channel = session.getContext().channel();
                            if (channel != null && channel.isActive()) {
                                log.debug("‚úÖ [SESSION] Found active channel for user {} (session: {})",
                                    userId, sessionId);
                                return channel;
                            } else {
                                log.debug("‚ö†Ô∏è [SESSION] User {} has inactive channel (session: {})",
                                    userId, sessionId);
                            }
                        } else {
                            log.debug("‚ö†Ô∏è [SESSION] User {} has no session data", userId);
                        }
                    } else {
                        log.debug("üì≠ [SESSION] User {} is not connected", userId);
                    }
                    return null;
                })
                .filter(channel -> channel != null)
                .collect(Collectors.toList());

            log.info("üì° [SESSION] Found {} active channels for {} participants in chat {}",
                channels.size(), participantIds.size(), chatId);

            // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–Ω–∞–ª–æ–≤
            for (int i = 0; i < channels.size(); i++) {
                log.debug("üìÑ [SESSION] Active channel {}: {}", i + 1, channels.get(i).id().asShortText());
            }

            return channels;

        } catch (Exception e) {
            log.error("‚ùå [SESSION] Error getting chat channels for chat {}: {}", chatId, e.getMessage(), e);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback - –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            log.warn("‚ö†Ô∏è [SESSION] Using fallback - returning all active channels for chat {}", chatId);
            return getAllActiveChannels();
        }
    }

    /**
     * Fallback –º–µ—Ç–æ–¥ - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
     */
    private List<io.netty.channel.Channel> getAllActiveChannels() {
        log.info("üîÑ [SESSION] Using fallback - getting all active channels");

        List<io.netty.channel.Channel> channels = sessions.values().stream()
            .map(session -> {
                log.debug("üîó [SESSION] Checking session: {} (user: {}, userId: {})",
                    session.getSessionId(), session.getUsername(), session.getUserId());
                return session.getContext().channel();
            })
            .filter(channel -> {
                boolean isActive = channel != null && channel.isActive();
                if (!isActive) {
                    log.debug("‚ö†Ô∏è [SESSION] Skipping inactive channel: {}",
                        channel != null ? channel.id().asShortText() : "null");
                } else {
                    log.debug("‚úÖ [SESSION] Found active channel: {}", channel.id().asShortText());
                }
                return isActive;
            })
            .collect(Collectors.toList());

        log.info("üì° [SESSION] Fallback: Found {} active channels from {} total sessions",
            channels.size(), sessions.size());

        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        for (int i = 0; i < channels.size(); i++) {
            log.info("üìÑ [SESSION] Fallback channel {}: {}", i + 1, channels.get(i).id().asShortText());
        }

        return channels;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
     */
    public io.netty.channel.Channel getUserChannel(Long userId) {
        ChannelHandlerContext ctx = getContextByUserId(userId);
        return ctx != null ? ctx.channel() : null;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    public boolean sendMessageToUser(Long userId, websocket.model.WebSocketMessage message) {
        io.netty.channel.Channel channel = getUserChannel(userId);
        if (channel != null && channel.isActive()) {
            try {
                ObjectMapper mapper = new ObjectMapper();
                String json = mapper.writeValueAsString(message);
                channel.writeAndFlush(new io.netty.handler.codec.http.websocketx.TextWebSocketFrame(json));
                return true;
            } catch (Exception e) {
                log.error("Error sending message to user {}: {}", userId, e.getMessage());
            }
        }
        return false;
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç (—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)
     */
    public void broadcastMessageToChat(Long chatId, Map<String, Object> messageData) {
        broadcastToChatInternal(chatId, messageData);
    }

    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç
     */
    private void broadcastToChatInternal(Long chatId, Map<String, Object> messageData) {
        try {
            log.info("üîä [BROADCAST] Starting broadcast for chat {} with data: {}", chatId, messageData);

            // –°–æ–∑–¥–∞–µ–º WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ
            websocket.model.WebSocketMessage wsMessage = new websocket.model.WebSocketMessage();
            wsMessage.setType(MessageType.CHAT_MESSAGE);
            wsMessage.setContent((String) messageData.get("content"));
            wsMessage.setChatId(chatId);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            wsMessage.setTimestamp(LocalDateTime.now());

            if (messageData.containsKey("senderId")) {
                wsMessage.setUserId(((Number) messageData.get("senderId")).longValue());
            }
            if (messageData.containsKey("senderUsername")) {
                wsMessage.setUsername((String) messageData.get("senderUsername"));
            }

            log.info("üìÑ [BROADCAST] Created WebSocket message: type={}, chatId={}, senderId={}, content='{}'",
                    wsMessage.getType(), wsMessage.getChatId(), wsMessage.getUserId(), wsMessage.getContent());

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –∏–∑ –ë–î)
            List<io.netty.channel.Channel> channels = getChatChannels(chatId);

            if (!channels.isEmpty()) {
                ObjectMapper mapper = new ObjectMapper();
                mapper.registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule());
                String json = mapper.writeValueAsString(wsMessage);

                log.info("üì° [BROADCAST] Broadcasting to {} channels for chat {}: {}", channels.size(), chatId, json);

                int successCount = 0;
                int failCount = 0;

                for (io.netty.channel.Channel channel : channels) {
                    try {
                        if (channel.isActive()) {
                            channel.writeAndFlush(new io.netty.handler.codec.http.websocketx.TextWebSocketFrame(json));
                            log.debug("‚úÖ [BROADCAST] Sent message to channel: {}", channel.id().asShortText());
                            successCount++;
                        } else {
                            log.debug("‚ö†Ô∏è [BROADCAST] Skipped inactive channel: {}", channel.id().asShortText());
                        }
                    } catch (Exception e) {
                        log.error("‚ùå [BROADCAST] Failed to send message to channel: {}", channel.id().asShortText(), e);
                        failCount++;
                    }
                }

                log.info("‚úÖ [BROADCAST] Broadcast completed for chat {}: {} successful, {} failed",
                        chatId, successCount, failCount);
            } else {
                log.warn("‚ö†Ô∏è [BROADCAST] No active channels found for chat {}", chatId);
            }

        } catch (Exception e) {
            log.error("‚ùå [BROADCAST] Error during broadcast for chat {}: {}", chatId, e.getMessage(), e);
        }
    }

    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
    private static class UserSession {
        private final String sessionId;
        private final ChannelHandlerContext context;
        private final String username;
        private final Long userId;

        public UserSession(String sessionId, ChannelHandlerContext context, String username, Long userId) {
            this.sessionId = sessionId;
            this.context = context;
            this.username = username;
            this.userId = userId;
        }

        public String getSessionId() { return sessionId; }
        public ChannelHandlerContext getContext() { return context; }
        public String getUsername() { return username; }
        public Long getUserId() { return userId; }
    }
}
