package websocket.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;

import java.util.List;
import java.util.Collections;

@Slf4j
@Service
public class ChatParticipantService {

    @Autowired
    private RestTemplate restTemplate;

    private final String CORE_API_URL = "http://localhost:8081"; // URL core-api-service

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –∏–∑ core-api-service
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç internal service header –¥–ª—è –æ–±—Ö–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    public List<Long> getChatParticipants(Long chatId) {
        try {
            log.info("üìû [CHAT-PARTICIPANT] Requesting participants for chat {} from core-api", chatId);

            String url = CORE_API_URL + "/api/chats/" + chatId + "/participants";

            // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            HttpHeaders headers = new HttpHeaders();
            headers.set("X-Internal-Service", "websocket-server"); // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            headers.set("X-Service-Auth", "internal-service-key"); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è

            HttpEntity<?> entity = new HttpEntity<>(headers);

            ResponseEntity<List<Long>> response = restTemplate.exchange(
                url,
                HttpMethod.GET,
                entity,
                new ParameterizedTypeReference<List<Long>>() {}
            );

            List<Long> participants = response.getBody();
            if (participants == null) {
                participants = Collections.emptyList();
            }

            log.info("‚úÖ [CHAT-PARTICIPANT] Got {} participants for chat {}: {}",
                participants.size(), chatId, participants);

            return participants;

        } catch (Exception e) {
            log.error("‚ùå [CHAT-PARTICIPANT] Failed to get participants for chat {}: {}", chatId, e.getMessage(), e);

            // –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            log.warn("‚ö†Ô∏è [CHAT-PARTICIPANT] Using fallback - returning all connected users for chat {}", chatId);
            return getAllConnectedUserIds();
        }
    }

    /**
     * –í—Ä–µ–º–µ–Ω–Ω—ã–π fallback –º–µ—Ç–æ–¥ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    private List<Long> getAllConnectedUserIds() {
        // –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è - —ç—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ SessionManager
        // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã SessionManager –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        return Collections.emptyList();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞
     */
    public boolean isUserParticipant(Long chatId, Long userId) {
        try {
            List<Long> participants = getChatParticipants(chatId);
            boolean isParticipant = participants.contains(userId);

            log.debug("üîç [CHAT-PARTICIPANT] User {} is {} participant of chat {}",
                userId, isParticipant ? "a" : "NOT a", chatId);

            return isParticipant;

        } catch (Exception e) {
            log.error("‚ùå [CHAT-PARTICIPANT] Error checking if user {} is participant of chat {}: {}",
                userId, chatId, e.getMessage());
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            return false;
        }
    }
}
